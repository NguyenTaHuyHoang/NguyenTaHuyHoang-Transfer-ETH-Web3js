#  Install the EVM chaincode on all the peers
peer chaincode install -n evmcc -l golang -v 0 -p github.com/hyperledger/fabric-chaincode-evm/evmcc

# Khởi tạo EVMCC
peer chaincode instantiate -n evmcc -v 0 -C staffaccountant -c '{"Args":[]}' -o orderer.example.com:7050 --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem 

---------------------------------------------------------------------------------------------------------------------------

  export FAB3_CONFIG=/home/ubuntu/go/src/github.com/hyperledger/fabric-chaincode-evm/examples/first-network-sdk-config.yaml 
  export FAB3_USER=User1 
  export FAB3_ORG=OrgAccountant 
  export FAB3_CHANNEL=staffaccountant 
  export FAB3_CCID=evmcc 
  export FAB3_PORT=5000 
  
  make fab3
./bin/fab3

Tạo terminal mới và cd vào fabric-chaincode-evm

npm install web3@0.20.7
node
Web3 = require('web3')
web3ETH = new Web3(new Web3.providers.HttpProvider('http://localhost:8545')) // ETH
web3Fabric = new Web3(new Web3.providers.HttpProvider('http://localhost:5000'))  // Fabric

// ABI của smart contract
contractETHABI = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "getOwnerBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address payable",
				"name": "recipient",
				"type": "address"
			}
		],
		"name": "sendEth",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	}
]; 
contractETHAddress = '0xD5aACE70fE8d9bC40A039e13E6C2C43812A23548'; // Địa chỉ của smart contract
contractETHInstance = web3ETH.eth.contract(contractETHABI).at(contractETHAddress);

------------------------------------------------------------------------------------------------

web3Fabric.eth.accounts
web3Fabric.eth.defaultAccount = web3Fabric.eth.accounts[0]

contractFabricABI = [
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "setBalance",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

contractFabricBytecode = '608060405234801561001057600080fd5b5061012f806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806312065fe0146037578063fb1669ca146051575b600080fd5b603d6069565b6040516048919060c2565b60405180910390f35b6067600480360381019060639190608f565b6072565b005b60008054905090565b8060008190555050565b60008135905060898160e5565b92915050565b60006020828403121560a057600080fd5b600060ac84828501607c565b91505092915050565b60bc8160db565b82525050565b600060208201905060d5600083018460b5565b92915050565b6000819050919050565b60ec8160db565b811460f657600080fd5b5056fea2646970667358221220a09ee091933e01dabccaaad72da4d5cc0b65abb9e5ccfe01c10b0d80c9693d1e64736f6c63430008000033'

MintTokenFabric = web3Fabric.eth.contract(contractFabricABI)
deployedContract = MintTokenFabric.new([], {data: contractFabricBytecode})
contractFabricInstance = MintTokenFabric.at(web3Fabric.eth.getTransactionReceipt(deployedContract.transactionHash).contractAddress)
contractFabricInstance = MintTokenFabric.at('0x4468c31da47cbe2943e7d001b708a50a7bcea33c')

------------------------------------------------------------------------------------------------
// Gọi hàm trong smart contract

web3ETH.eth.getAccounts(function(err, accounts) {
    if (err) {
        console.error('Error fetching accounts:', err);
        return;
    }
    // Địa chỉ nhận Ether
        var recipientAddress = '0x3942B0Dd1B21D206512216B482697dE4915Fd72F';
        var AccountAddress = accounts[0]; // Địa chỉ của chủ sở hữu hợp đồng
        console.log('AccoundAddress', AccountAddress)
	contractETHInstance.sendEth.sendTransaction(recipientAddress, {
	    from: AccountAddress,
	    value: web3ETH.toWei(1, 'ether'), // amount là số lượng ether bạn muốn gửi
	    gas: 300000 // Số gas tối đa bạn muốn sử dụng cho giao dịch
	}, function(error, result) {
	    if (!error) {
		console.log(result); // Log transaction hash nếu thành công
	    } else {
		console.error(error); // Log lỗi nếu có
	    }
	});
});

function getOwnerBalance(){
	var balanceOwner = contractETHInstance.getOwnerBalance();
	var balanceOwnerInEther = web3ETH.fromWei(balanceOwner, 'ether');
	// console.log('Owner Balance in Ether:', balanceOwnerInEther);
	return balanceOwnerInEther;
}

balanceOwner = contractETHInstance.getOwnerBalance();
contractFabricInstance.setBalance(balanceOwner)
contractFabricInstance.getBalance()
